// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Desyn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Desyn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Desyn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Desyn", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Desyn | null {
    return changetype<Desyn | null>(store.get_in_block("Desyn", id));
  }

  static load(id: string): Desyn | null {
    return changetype<Desyn | null>(store.get("Desyn", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get color(): string {
    let value = this.get("color");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set color(value: string) {
    this.set("color", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get finalizedPoolCount(): i32 {
    let value = this.get("finalizedPoolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set finalizedPoolCount(value: i32) {
    this.set("finalizedPoolCount", Value.fromI32(value));
  }

  get crpCount(): i32 {
    let value = this.get("crpCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set crpCount(value: i32) {
    this.set("crpCount", Value.fromI32(value));
  }

  get pools(): PoolLoader {
    return new PoolLoader("Desyn", this.get("id")!.toString(), "pools");
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block("Pool", id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get controller(): Bytes {
    let value = this.get("controller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set controller(value: Bytes) {
    this.set("controller", Value.fromBytes(value));
  }

  get publicSwap(): boolean {
    let value = this.get("publicSwap");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set publicSwap(value: boolean) {
    this.set("publicSwap", Value.fromBoolean(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get crp(): boolean {
    let value = this.get("crp");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set crp(value: boolean) {
    this.set("crp", Value.fromBoolean(value));
  }

  get crpController(): Bytes | null {
    let value = this.get("crpController");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set crpController(value: Bytes | null) {
    if (!value) {
      this.unset("crpController");
    } else {
      this.set("crpController", Value.fromBytes(<Bytes>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get rights(): Array<string> {
    let value = this.get("rights");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rights(value: Array<string>) {
    this.set("rights", Value.fromStringArray(value));
  }

  get upperCap(): BigInt | null {
    let value = this.get("upperCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set upperCap(value: BigInt | null) {
    if (!value) {
      this.unset("upperCap");
    } else {
      this.set("upperCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get floorCap(): BigInt | null {
    let value = this.get("floorCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set floorCap(value: BigInt | null) {
    if (!value) {
      this.unset("floorCap");
    } else {
      this.set("floorCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get managerFee(): BigInt | null {
    let value = this.get("managerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set managerFee(value: BigInt | null) {
    if (!value) {
      this.unset("managerFee");
    } else {
      this.set("managerFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get issueFee(): BigInt | null {
    let value = this.get("issueFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set issueFee(value: BigInt | null) {
    if (!value) {
      this.unset("issueFee");
    } else {
      this.set("issueFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get redeemFee(): BigInt | null {
    let value = this.get("redeemFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redeemFee(value: BigInt | null) {
    if (!value) {
      this.unset("redeemFee");
    } else {
      this.set("redeemFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get perfermanceFee(): BigInt | null {
    let value = this.get("perfermanceFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set perfermanceFee(value: BigInt | null) {
    if (!value) {
      this.unset("perfermanceFee");
    } else {
      this.set("perfermanceFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get startClaimFeeTime(): BigInt | null {
    let value = this.get("startClaimFeeTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startClaimFeeTime(value: BigInt | null) {
    if (!value) {
      this.unset("startClaimFeeTime");
    } else {
      this.set("startClaimFeeTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalWeight(): BigDecimal {
    let value = this.get("totalWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalWeight(value: BigDecimal) {
    this.set("totalWeight", Value.fromBigDecimal(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get tokensList(): Array<Bytes> {
    let value = this.get("tokensList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokensList(value: Array<Bytes>) {
    this.set("tokensList", Value.fromBytesArray(value));
  }

  get tokensOriginalList(): Array<Bytes> {
    let value = this.get("tokensOriginalList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokensOriginalList(value: Array<Bytes>) {
    this.set("tokensOriginalList", Value.fromBytesArray(value));
  }

  get tokens(): PoolTokenLoader {
    return new PoolTokenLoader("Pool", this.get("id")!.toString(), "tokens");
  }

  get shares(): PoolShareLoader {
    return new PoolShareLoader("Pool", this.get("id")!.toString(), "shares");
  }

  get createTime(): i32 {
    let value = this.get("createTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createTime(value: i32) {
    this.set("createTime", Value.fromI32(value));
  }

  get tokensCount(): BigInt {
    let value = this.get("tokensCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensCount(value: BigInt) {
    this.set("tokensCount", Value.fromBigInt(value));
  }

  get holdersCount(): BigInt {
    let value = this.get("holdersCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set holdersCount(value: BigInt) {
    this.set("holdersCount", Value.fromBigInt(value));
  }

  get joinsCount(): BigInt {
    let value = this.get("joinsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set joinsCount(value: BigInt) {
    this.set("joinsCount", Value.fromBigInt(value));
  }

  get exitsCount(): BigInt {
    let value = this.get("exitsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set exitsCount(value: BigInt) {
    this.set("exitsCount", Value.fromBigInt(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get factoryID(): string {
    let value = this.get("factoryID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factoryID(value: string) {
    this.set("factoryID", Value.fromString(value));
  }

  get tx(): Bytes | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(<Bytes>value));
    }
  }

  get swaps(): SwapLoader {
    return new SwapLoader("Pool", this.get("id")!.toString(), "swaps");
  }

  get collectPeriod(): BigInt | null {
    let value = this.get("collectPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("collectPeriod");
    } else {
      this.set("collectPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get collectEndTime(): BigInt | null {
    let value = this.get("collectEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectEndTime(value: BigInt | null) {
    if (!value) {
      this.unset("collectEndTime");
    } else {
      this.set("collectEndTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get closurePeriod(): BigInt | null {
    let value = this.get("closurePeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closurePeriod(value: BigInt | null) {
    if (!value) {
      this.unset("closurePeriod");
    } else {
      this.set("closurePeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get closureEndTime(): BigInt | null {
    let value = this.get("closureEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closureEndTime(value: BigInt | null) {
    if (!value) {
      this.unset("closureEndTime");
    } else {
      this.set("closureEndTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get etype(): BigInt | null {
    let value = this.get("etype");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set etype(value: BigInt | null) {
    if (!value) {
      this.unset("etype");
    } else {
      this.set("etype", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWhiteLists(): TokenWhiteListLoader {
    return new TokenWhiteListLoader(
      "Pool",
      this.get("id")!.toString(),
      "tokenWhiteLists",
    );
  }

  get investorLists(): InvestorListLoader {
    return new InvestorListLoader(
      "Pool",
      this.get("id")!.toString(),
      "investorLists",
    );
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (!value) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(<BigInt>value));
    }
  }

  get isSoldOut(): boolean {
    let value = this.get("isSoldOut");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSoldOut(value: boolean) {
    this.set("isSoldOut", Value.fromBoolean(value));
  }
}

export class EtfStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EtfStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EtfStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EtfStatus", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EtfStatus | null {
    return changetype<EtfStatus | null>(store.get_in_block("EtfStatus", id));
  }

  static load(id: string): EtfStatus | null {
    return changetype<EtfStatus | null>(store.get("EtfStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectPeriod(): BigInt {
    let value = this.get("collectPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collectPeriod(value: BigInt) {
    this.set("collectPeriod", Value.fromBigInt(value));
  }

  get collectEndTime(): BigInt {
    let value = this.get("collectEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collectEndTime(value: BigInt) {
    this.set("collectEndTime", Value.fromBigInt(value));
  }

  get closurePeriod(): BigInt {
    let value = this.get("closurePeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closurePeriod(value: BigInt) {
    this.set("closurePeriod", Value.fromBigInt(value));
  }

  get closureEndTime(): BigInt {
    let value = this.get("closureEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closureEndTime(value: BigInt) {
    this.set("closureEndTime", Value.fromBigInt(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolToken | null {
    return changetype<PoolToken | null>(store.get_in_block("PoolToken", id));
  }

  static load(id: string): PoolToken | null {
    return changetype<PoolToken | null>(store.get("PoolToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get denormWeight(): BigDecimal {
    let value = this.get("denormWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set denormWeight(value: BigDecimal) {
    this.set("denormWeight", Value.fromBigDecimal(value));
  }
}

export class PoolShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolShare", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolShare | null {
    return changetype<PoolShare | null>(store.get_in_block("PoolShare", id));
  }

  static load(id: string): PoolShare | null {
    return changetype<PoolShare | null>(store.get("PoolShare", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sharesOwned(): PoolShareLoader {
    return new PoolShareLoader(
      "User",
      this.get("id")!.toString(),
      "sharesOwned",
    );
  }

  get txs(): TransactionLoader {
    return new TransactionLoader("User", this.get("id")!.toString(), "txs");
  }

  get swaps(): SwapLoader {
    return new SwapLoader("User", this.get("id")!.toString(), "swaps");
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Swap | null {
    return changetype<Swap | null>(store.get_in_block("Swap", id));
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenInSym(): string {
    let value = this.get("tokenInSym");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenInSym(value: string) {
    this.set("tokenInSym", Value.fromString(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenOutSym(): string {
    let value = this.get("tokenOutSym");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenOutSym(value: string) {
    this.set("tokenOutSym", Value.fromString(value));
  }

  get tokenAmountIn(): BigDecimal {
    let value = this.get("tokenAmountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmountIn(value: BigDecimal) {
    this.set("tokenAmountIn", Value.fromBigDecimal(value));
  }

  get tokenAmountOut(): BigDecimal {
    let value = this.get("tokenAmountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmountOut(value: BigDecimal) {
    this.set("tokenAmountOut", Value.fromBigDecimal(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (!value) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(<string>value));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (!value) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(<string>value));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get feeValue(): BigDecimal {
    let value = this.get("feeValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set feeValue(value: BigDecimal) {
    this.set("feeValue", Value.fromBigDecimal(value));
  }

  get poolTotalSwapVolume(): BigDecimal {
    let value = this.get("poolTotalSwapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set poolTotalSwapVolume(value: BigDecimal) {
    this.set("poolTotalSwapVolume", Value.fromBigDecimal(value));
  }

  get poolTotalSwapFee(): BigDecimal {
    let value = this.get("poolTotalSwapFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set poolTotalSwapFee(value: BigDecimal) {
    this.set("poolTotalSwapFee", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }

  get block(): i32 {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get gasUsed(): BigDecimal | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set gasUsed(value: BigDecimal | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get gasPrice(): BigDecimal | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set gasPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (!value) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(<string>value));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (!value) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(<string>value));
    }
  }

  get tokenAddress(): string | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromString(<string>value));
    }
  }

  get action(): string | null {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (!value) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(<string>value));
    }
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenAmountInOut(): BigDecimal | null {
    let value = this.get("tokenAmountInOut");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmountInOut(value: BigDecimal | null) {
    if (!value) {
      this.unset("tokenAmountInOut");
    } else {
      this.set("tokenAmountInOut", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get newAmount(): BigDecimal | null {
    let value = this.get("newAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set newAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("newAmount");
    } else {
      this.set("newAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lpTokenShare(): BigDecimal | null {
    let value = this.get("lpTokenShare");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lpTokenShare(value: BigDecimal | null) {
    if (!value) {
      this.unset("lpTokenShare");
    } else {
      this.set("lpTokenShare", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class TokenPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenPrice", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenPrice | null {
    return changetype<TokenPrice | null>(store.get_in_block("TokenPrice", id));
  }

  static load(id: string): TokenPrice | null {
    return changetype<TokenPrice | null>(store.get("TokenPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get poolTokenId(): string | null {
    let value = this.get("poolTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolTokenId(value: string | null) {
    if (!value) {
      this.unset("poolTokenId");
    } else {
      this.set("poolTokenId", Value.fromString(<string>value));
    }
  }
}

export class TokenWhiteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenWhiteList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenWhiteList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenWhiteList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenWhiteList | null {
    return changetype<TokenWhiteList | null>(
      store.get_in_block("TokenWhiteList", id),
    );
  }

  static load(id: string): TokenWhiteList | null {
    return changetype<TokenWhiteList | null>(store.get("TokenWhiteList", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get spender(): string | null {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set spender(value: string | null) {
    if (!value) {
      this.unset("spender");
    } else {
      this.set("spender", Value.fromString(<string>value));
    }
  }

  get sort(): BigInt | null {
    let value = this.get("sort");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sort(value: BigInt | null) {
    if (!value) {
      this.unset("sort");
    } else {
      this.set("sort", Value.fromBigInt(<BigInt>value));
    }
  }

  get caller(): string | null {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set caller(value: string | null) {
    if (!value) {
      this.unset("caller");
    } else {
      this.set("caller", Value.fromString(<string>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }
}

export class ExcuteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExcuteList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExcuteList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExcuteList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExcuteList | null {
    return changetype<ExcuteList | null>(store.get_in_block("ExcuteList", id));
  }

  static load(id: string): ExcuteList | null {
    return changetype<ExcuteList | null>(store.get("ExcuteList", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hash(value: string | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromString(<string>value));
    }
  }
}

export class InvestorList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestorList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InvestorList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InvestorList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InvestorList | null {
    return changetype<InvestorList | null>(
      store.get_in_block("InvestorList", id),
    );
  }

  static load(id: string): InvestorList | null {
    return changetype<InvestorList | null>(store.get("InvestorList", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }
}

export class PoolTokenInitList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolTokenInitList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolTokenInitList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolTokenInitList", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolTokenInitList | null {
    return changetype<PoolTokenInitList | null>(
      store.get_in_block("PoolTokenInitList", id),
    );
  }

  static load(id: string): PoolTokenInitList | null {
    return changetype<PoolTokenInitList | null>(
      store.get("PoolTokenInitList", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string | null {
    let value = this.get("caller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set caller(value: string | null) {
    if (!value) {
      this.unset("caller");
    } else {
      this.set("caller", Value.fromString(<string>value));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }

  get initToken(): string | null {
    let value = this.get("initToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initToken(value: string | null) {
    if (!value) {
      this.unset("initToken");
    } else {
      this.set("initToken", Value.fromString(<string>value));
    }
  }

  get initTokenTotal(): BigInt | null {
    let value = this.get("initTokenTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initTokenTotal(value: BigInt | null) {
    if (!value) {
      this.unset("initTokenTotal");
    } else {
      this.set("initTokenTotal", Value.fromBigInt(<BigInt>value));
    }
  }

  get initShare(): BigInt | null {
    let value = this.get("initShare");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initShare(value: BigInt | null) {
    if (!value) {
      this.unset("initShare");
    } else {
      this.set("initShare", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Pool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Pool[]>(value);
  }
}

export class PoolTokenLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolToken[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolToken[]>(value);
  }
}

export class PoolShareLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolShare[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolShare[]>(value);
  }
}

export class SwapLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Swap[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Swap[]>(value);
  }
}

export class TokenWhiteListLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenWhiteList[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenWhiteList[]>(value);
  }
}

export class InvestorListLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): InvestorList[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<InvestorList[]>(value);
  }
}

export class TransactionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transaction[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transaction[]>(value);
  }
}
