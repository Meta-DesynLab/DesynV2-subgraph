// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CrpFactoryUpdated extends ethereum.Event {
  get params(): CrpFactoryUpdated__Params {
    return new CrpFactoryUpdated__Params(this);
  }
}

export class CrpFactoryUpdated__Params {
  _event: CrpFactoryUpdated;

  constructor(event: CrpFactoryUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCrp(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FactoryUpdated extends ethereum.Event {
  get params(): FactoryUpdated__Params {
    return new FactoryUpdated__Params(this);
  }
}

export class FactoryUpdated__Params {
  _event: FactoryUpdated;

  constructor(event: FactoryUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newF(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Rebalanced extends ethereum.Event {
  get params(): Rebalanced__Params {
    return new Rebalanced__Params(this);
  }
}

export class Rebalanced__Params {
  _event: Rebalanced;

  constructor(event: Rebalanced) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newWeight0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newWeight1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newBalance0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newBalance1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isSoldOut(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class RouterStateChange extends ethereum.Event {
  get params(): RouterStateChange__Params {
    return new RouterStateChange__Params(this);
  }
}

export class RouterStateChange__Params {
  _event: RouterStateChange;

  constructor(event: RouterStateChange) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isApproved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class TokenApproved extends ethereum.Event {
  get params(): TokenApproved__Params {
    return new TokenApproved__Params(this);
  }
}

export class TokenApproved__Params {
  _event: TokenApproved;

  constructor(event: TokenApproved) {
    this._event = event;
  }

  get etf(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RebalanceAdapter__getUnderlyingInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTokenBalance(): BigInt {
    return this.value0;
  }

  getTokenWeight(): BigInt {
    return this.value1;
  }
}

export class RebalanceAdapter extends ethereum.SmartContract {
  static bind(address: Address): RebalanceAdapter {
    return new RebalanceAdapter("RebalanceAdapter", address);
  }

  crpFactory(): Address {
    let result = super.call("crpFactory", "crpFactory():(address)", []);

    return result[0].toAddress();
  }

  try_crpFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("crpFactory", "crpFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUnderlyingAllowance(
    bPool: Address,
    token: Address,
    spender: Address,
  ): BigInt {
    let result = super.call(
      "getUnderlyingAllowance",
      "getUnderlyingAllowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(bPool),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingAllowance(
    bPool: Address,
    token: Address,
    spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingAllowance",
      "getUnderlyingAllowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(bPool),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingInfo(
    bPool: Address,
    token: Address,
  ): RebalanceAdapter__getUnderlyingInfoResult {
    let result = super.call(
      "getUnderlyingInfo",
      "getUnderlyingInfo(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(bPool), ethereum.Value.fromAddress(token)],
    );

    return new RebalanceAdapter__getUnderlyingInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getUnderlyingInfo(
    bPool: Address,
    token: Address,
  ): ethereum.CallResult<RebalanceAdapter__getUnderlyingInfoResult> {
    let result = super.tryCall(
      "getUnderlyingInfo",
      "getUnderlyingInfo(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(bPool), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RebalanceAdapter__getUnderlyingInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  isRouterApproved(param0: Address): boolean {
    let result = super.call(
      "isRouterApproved",
      "isRouterApproved(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isRouterApproved(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRouterApproved",
      "isRouterApproved(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _crpFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get etf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ApproveSwapRouterCall extends ethereum.Call {
  get inputs(): ApproveSwapRouterCall__Inputs {
    return new ApproveSwapRouterCall__Inputs(this);
  }

  get outputs(): ApproveSwapRouterCall__Outputs {
    return new ApproveSwapRouterCall__Outputs(this);
  }
}

export class ApproveSwapRouterCall__Inputs {
  _call: ApproveSwapRouterCall;

  constructor(call: ApproveSwapRouterCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isApproved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ApproveSwapRouterCall__Outputs {
  _call: ApproveSwapRouterCall;

  constructor(call: ApproveSwapRouterCall) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get rebalanceInfo(): RebalanceCallRebalanceInfoStruct {
    return changetype<RebalanceCallRebalanceInfoStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCallRebalanceInfoStruct extends ethereum.Tuple {
  get etf(): Address {
    return this[0].toAddress();
  }

  get token0(): Address {
    return this[1].toAddress();
  }

  get token1(): Address {
    return this[2].toAddress();
  }

  get aggregator(): Address {
    return this[3].toAddress();
  }

  get swapType(): i32 {
    return this[4].toI32();
  }

  get quantity(): BigInt {
    return this[5].toBigInt();
  }

  get data(): Bytes {
    return this[6].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCrpFactoryCall extends ethereum.Call {
  get inputs(): SetCrpFactoryCall__Inputs {
    return new SetCrpFactoryCall__Inputs(this);
  }

  get outputs(): SetCrpFactoryCall__Outputs {
    return new SetCrpFactoryCall__Outputs(this);
  }
}

export class SetCrpFactoryCall__Inputs {
  _call: SetCrpFactoryCall;

  constructor(call: SetCrpFactoryCall) {
    this._call = call;
  }

  get _crpFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCrpFactoryCall__Outputs {
  _call: SetCrpFactoryCall;

  constructor(call: SetCrpFactoryCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
