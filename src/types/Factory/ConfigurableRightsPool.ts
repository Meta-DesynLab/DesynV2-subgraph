// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddAdmin extends ethereum.Event {
  get params(): AddAdmin__Params {
    return new AddAdmin__Params(this);
  }
}

export class AddAdmin__Params {
  _event: AddAdmin;

  constructor(event: AddAdmin) {
    this._event = event;
  }

  get newAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_DEL_WHITELIST extends ethereum.Event {
  get params(): LOG_DEL_WHITELIST__Params {
    return new LOG_DEL_WHITELIST__Params(this);
  }
}

export class LOG_DEL_WHITELIST__Params {
  _event: LOG_DEL_WHITELIST;

  constructor(event: LOG_DEL_WHITELIST) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sort(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LOG_WHITELIST extends ethereum.Event {
  get params(): LOG_WHITELIST__Params {
    return new LOG_WHITELIST__Params(this);
  }
}

export class LOG_WHITELIST__Params {
  _event: LOG_WHITELIST;

  constructor(event: LOG_WHITELIST) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sort(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LogCall extends ethereum.Event {
  get params(): LogCall__Params {
    return new LogCall__Params(this);
  }
}

export class LogCall__Params {
  _event: LogCall;

  constructor(event: LogCall) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LogExit extends ethereum.Event {
  get params(): LogExit__Params {
    return new LogExit__Params(this);
  }
}

export class LogExit__Params {
  _event: LogExit;

  constructor(event: LogExit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogJoin extends ethereum.Event {
  get params(): LogJoin__Params {
    return new LogJoin__Params(this);
  }
}

export class LogJoin__Params {
  _event: LogJoin;

  constructor(event: LogJoin) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolTokenInit extends ethereum.Event {
  get params(): PoolTokenInit__Params {
    return new PoolTokenInit__Params(this);
  }
}

export class PoolTokenInit__Params {
  _event: PoolTokenInit;

  constructor(event: PoolTokenInit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get initTokenTotal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get initShare(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveAdmin extends ethereum.Event {
  get params(): RemoveAdmin__Params {
    return new RemoveAdmin__Params(this);
  }
}

export class RemoveAdmin__Params {
  _event: RemoveAdmin;

  constructor(event: RemoveAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetManagerFee extends ethereum.Event {
  get params(): SetManagerFee__Params {
    return new SetManagerFee__Params(this);
  }
}

export class SetManagerFee__Params {
  _event: SetManagerFee;

  constructor(event: SetManagerFee) {
    this._event = event;
  }

  get managerFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get issueFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get redeemFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get perfermanceFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SizeChanged extends ethereum.Event {
  get params(): SizeChanged__Params {
    return new SizeChanged__Params(this);
  }
}

export class SizeChanged__Params {
  _event: SizeChanged;

  constructor(event: SizeChanged) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sizeType(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get oldSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ConfigurableRightsPool__beginFundAssetsResultValue0Struct extends ethereum.Tuple {
  get etfAmount(): BigInt {
    return this[0].toBigInt();
  }

  get fundAmount(): BigInt {
    return this[1].toBigInt();
  }

  get snapshotTime(): BigInt {
    return this[2].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[3].toAddressArray();
  }

  get tokensAmount(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class ConfigurableRightsPool__couldClaimManagerFeeResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ConfigurableRightsPool__endFundAssetsResultValue0Struct extends ethereum.Tuple {
  get etfAmount(): BigInt {
    return this[0].toBigInt();
  }

  get fundAmount(): BigInt {
    return this[1].toBigInt();
  }

  get snapshotTime(): BigInt {
    return this[2].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[3].toAddressArray();
  }

  get tokensAmount(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class ConfigurableRightsPool__etfStatusResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class ConfigurableRightsPool__rightsResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class ConfigurableRightsPool__snapshotAssetsResultValue0Struct extends ethereum.Tuple {
  get etfAmount(): BigInt {
    return this[0].toBigInt();
  }

  get fundAmount(): BigInt {
    return this[1].toBigInt();
  }

  get snapshotTime(): BigInt {
    return this[2].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[3].toAddressArray();
  }

  get tokensAmount(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class ConfigurableRightsPool extends ethereum.SmartContract {
  static bind(address: Address): ConfigurableRightsPool {
    return new ConfigurableRightsPool("ConfigurableRightsPool", address);
  }

  DECIMALS(): i32 {
    let result = super.call("DECIMALS", "DECIMALS():(uint8)", []);

    return result[0].toI32();
  }

  try_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall("DECIMALS", "DECIMALS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  adminList(param0: Address): boolean {
    let result = super.call("adminList", "adminList(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_adminList(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminList", "adminList(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allOwnerPercentage(): BigInt {
    let result = super.call(
      "allOwnerPercentage",
      "allOwnerPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allOwnerPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allOwnerPercentage",
      "allOwnerPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  bFactory(): Address {
    let result = super.call("bFactory", "bFactory():(address)", []);

    return result[0].toAddress();
  }

  try_bFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("bFactory", "bFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bPool(): Address {
    let result = super.call("bPool", "bPool():(address)", []);

    return result[0].toAddress();
  }

  try_bPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("bPool", "bPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beginFundAssets(): ConfigurableRightsPool__beginFundAssetsResultValue0Struct {
    let result = super.call(
      "beginFundAssets",
      "beginFundAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );

    return result[0].toTuple() as ConfigurableRightsPool__beginFundAssetsResultValue0Struct;
  }

  try_beginFundAssets(): ethereum.CallResult<
    ConfigurableRightsPool__beginFundAssetsResultValue0Struct
  > {
    let result = super.tryCall(
      "beginFundAssets",
      "beginFundAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ConfigurableRightsPool__beginFundAssetsResultValue0Struct
    );
  }

  canProvideLiquidity(provider: Address): boolean {
    let result = super.call(
      "canProvideLiquidity",
      "canProvideLiquidity(address):(bool)",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBoolean();
  }

  try_canProvideLiquidity(provider: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canProvideLiquidity",
      "canProvideLiquidity(address):(bool)",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  claimPeriod(): BigInt {
    let result = super.call("claimPeriod", "claimPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimPeriod", "claimPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  couldClaimManagerFee(): ConfigurableRightsPool__couldClaimManagerFeeResult {
    let result = super.call(
      "couldClaimManagerFee",
      "couldClaimManagerFee():(bool,uint256,uint256)",
      []
    );

    return new ConfigurableRightsPool__couldClaimManagerFeeResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_couldClaimManagerFee(): ethereum.CallResult<
    ConfigurableRightsPool__couldClaimManagerFeeResult
  > {
    let result = super.tryCall(
      "couldClaimManagerFee",
      "couldClaimManagerFee():(bool,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConfigurableRightsPool__couldClaimManagerFeeResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  endFundAssets(): ConfigurableRightsPool__endFundAssetsResultValue0Struct {
    let result = super.call(
      "endFundAssets",
      "endFundAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );

    return result[0].toTuple() as ConfigurableRightsPool__endFundAssetsResultValue0Struct;
  }

  try_endFundAssets(): ethereum.CallResult<
    ConfigurableRightsPool__endFundAssetsResultValue0Struct
  > {
    let result = super.tryCall(
      "endFundAssets",
      "endFundAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ConfigurableRightsPool__endFundAssetsResultValue0Struct
    );
  }

  etfStatus(): ConfigurableRightsPool__etfStatusResult {
    let result = super.call(
      "etfStatus",
      "etfStatus():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new ConfigurableRightsPool__etfStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_etfStatus(): ethereum.CallResult<
    ConfigurableRightsPool__etfStatusResult
  > {
    let result = super.tryCall(
      "etfStatus",
      "etfStatus():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConfigurableRightsPool__etfStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  etype(): i32 {
    let result = super.call("etype", "etype():(uint8)", []);

    return result[0].toI32();
  }

  try_etype(): ethereum.CallResult<i32> {
    let result = super.tryCall("etype", "etype():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  execute(
    _target: Address,
    _value: BigInt,
    _data: Bytes,
    isUnderlying: boolean
  ): Bytes {
    let result = super.call(
      "execute",
      "execute(address,uint256,bytes,bool):(bytes)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBoolean(isUnderlying)
      ]
    );

    return result[0].toBytes();
  }

  try_execute(
    _target: Address,
    _value: BigInt,
    _data: Bytes,
    isUnderlying: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "execute",
      "execute(address,uint256,bytes,bool):(bytes)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromBoolean(isUnderlying)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDesynSafeMathVersion(): Address {
    let result = super.call(
      "getDesynSafeMathVersion",
      "getDesynSafeMathVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getDesynSafeMathVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDesynSafeMathVersion",
      "getDesynSafeMathVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwnerPercentage(): Array<BigInt> {
    let result = super.call(
      "getOwnerPercentage",
      "getOwnerPercentage():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getOwnerPercentage(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOwnerPercentage",
      "getOwnerPercentage():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOwners(): Array<Address> {
    let result = super.call("getOwners", "getOwners():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getOwners(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getOwners", "getOwners():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRightsManagerVersion(): Address {
    let result = super.call(
      "getRightsManagerVersion",
      "getRightsManagerVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRightsManagerVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRightsManagerVersion",
      "getRightsManagerVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSmartPoolManagerVersion(): Address {
    let result = super.call(
      "getSmartPoolManagerVersion",
      "getSmartPoolManagerVersion():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSmartPoolManagerVersion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSmartPoolManagerVersion",
      "getSmartPoolManagerVersion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasClaimManageFee(): boolean {
    let result = super.call(
      "hasClaimManageFee",
      "hasClaimManageFee():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasClaimManageFee(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasClaimManageFee",
      "hasClaimManageFee():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasPermission(permission: i32): boolean {
    let result = super.call("hasPermission", "hasPermission(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permission))
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission(permission: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPermission", "hasPermission(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(permission))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasSetBeginFund(): boolean {
    let result = super.call("hasSetBeginFund", "hasSetBeginFund():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasSetBeginFund(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasSetBeginFund",
      "hasSetBeginFund():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasSetEndFund(): boolean {
    let result = super.call("hasSetEndFund", "hasSetEndFund():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasSetEndFund(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasSetEndFund", "hasSetEndFund():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseApproval(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCompletedCollect(): boolean {
    let result = super.call(
      "isCompletedCollect",
      "isCompletedCollect():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isCompletedCollect(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCompletedCollect",
      "isCompletedCollect():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oracleAddress(): Address {
    let result = super.call("oracleAddress", "oracleAddress():(address)", []);

    return result[0].toAddress();
  }

  try_oracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleAddress",
      "oracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rights(): ConfigurableRightsPool__rightsResult {
    let result = super.call("rights", "rights():(bool,bool)", []);

    return new ConfigurableRightsPool__rightsResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_rights(): ethereum.CallResult<ConfigurableRightsPool__rightsResult> {
    let result = super.tryCall("rights", "rights():(bool,bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConfigurableRightsPool__rightsResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  snapshotAssets(): ConfigurableRightsPool__snapshotAssetsResultValue0Struct {
    let result = super.call(
      "snapshotAssets",
      "snapshotAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );

    return result[0].toTuple() as ConfigurableRightsPool__snapshotAssetsResultValue0Struct;
  }

  try_snapshotAssets(): ethereum.CallResult<
    ConfigurableRightsPool__snapshotAssetsResultValue0Struct
  > {
    let result = super.tryCall(
      "snapshotAssets",
      "snapshotAssets():((uint256,uint256,uint256,address[],uint256[]))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ConfigurableRightsPool__snapshotAssetsResultValue0Struct
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultAddress(): Address {
    let result = super.call("vaultAddress", "vaultAddress():(address)", []);

    return result[0].toAddress();
  }

  try_vaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultAddress", "vaultAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenSymbol(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenToWhitelistCall extends ethereum.Call {
  get inputs(): AddTokenToWhitelistCall__Inputs {
    return new AddTokenToWhitelistCall__Inputs(this);
  }

  get outputs(): AddTokenToWhitelistCall__Outputs {
    return new AddTokenToWhitelistCall__Outputs(this);
  }
}

export class AddTokenToWhitelistCall__Inputs {
  _call: AddTokenToWhitelistCall;

  constructor(call: AddTokenToWhitelistCall) {
    this._call = call;
  }

  get sort(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get token(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddTokenToWhitelistCall__Outputs {
  _call: AddTokenToWhitelistCall;

  constructor(call: AddTokenToWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnPoolShareFromLibCall extends ethereum.Call {
  get inputs(): BurnPoolShareFromLibCall__Inputs {
    return new BurnPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): BurnPoolShareFromLibCall__Outputs {
    return new BurnPoolShareFromLibCall__Outputs(this);
  }
}

export class BurnPoolShareFromLibCall__Inputs {
  _call: BurnPoolShareFromLibCall;

  constructor(call: BurnPoolShareFromLibCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnPoolShareFromLibCall__Outputs {
  _call: BurnPoolShareFromLibCall;

  constructor(call: BurnPoolShareFromLibCall) {
    this._call = call;
  }
}

export class ClaimManagerFeeCall extends ethereum.Call {
  get inputs(): ClaimManagerFeeCall__Inputs {
    return new ClaimManagerFeeCall__Inputs(this);
  }

  get outputs(): ClaimManagerFeeCall__Outputs {
    return new ClaimManagerFeeCall__Outputs(this);
  }
}

export class ClaimManagerFeeCall__Inputs {
  _call: ClaimManagerFeeCall;

  constructor(call: ClaimManagerFeeCall) {
    this._call = call;
  }
}

export class ClaimManagerFeeCall__Outputs {
  _call: ClaimManagerFeeCall;

  constructor(call: ClaimManagerFeeCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collectPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get closurePeriod(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get tokenRange(): CreatePoolCallTokenRangeStruct {
    return this._call.inputValues[3].value.toTuple() as CreatePoolCallTokenRangeStruct;
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class CreatePoolCallTokenRangeStruct extends ethereum.Tuple {
  get bspFloor(): BigInt {
    return this[0].toBigInt();
  }

  get bspCap(): BigInt {
    return this[1].toBigInt();
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get isUnderlying(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _returnValue(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get factoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolParams(): InitCallPoolParamsStruct {
    return this._call.inputValues[1].value.toTuple() as InitCallPoolParamsStruct;
  }

  get rightsStruct(): InitCallRightsStructStruct {
    return this._call.inputValues[2].value.toTuple() as InitCallRightsStructStruct;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCallPoolParamsStruct extends ethereum.Tuple {
  get poolTokenSymbol(): string {
    return this[0].toString();
  }

  get poolTokenName(): string {
    return this[1].toString();
  }

  get constituentTokens(): Array<Address> {
    return this[2].toAddressArray();
  }

  get tokenBalances(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get tokenWeights(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get managerFee(): BigInt {
    return this[5].toBigInt();
  }

  get redeemFee(): BigInt {
    return this[6].toBigInt();
  }

  get issueFee(): BigInt {
    return this[7].toBigInt();
  }

  get perfermanceFee(): BigInt {
    return this[8].toBigInt();
  }

  get etype(): i32 {
    return this[9].toI32();
  }
}

export class InitCallRightsStructStruct extends ethereum.Tuple {
  get canWhitelistLPs(): boolean {
    return this[0].toBoolean();
  }

  get canTokenWhiteLists(): boolean {
    return this[1].toBoolean();
  }
}

export class InitHandleCall extends ethereum.Call {
  get inputs(): InitHandleCall__Inputs {
    return new InitHandleCall__Inputs(this);
  }

  get outputs(): InitHandleCall__Outputs {
    return new InitHandleCall__Outputs(this);
  }
}

export class InitHandleCall__Inputs {
  _call: InitHandleCall;

  constructor(call: InitHandleCall) {
    this._call = call;
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _ownerPercentage(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class InitHandleCall__Outputs {
  _call: InitHandleCall;

  constructor(call: InitHandleCall) {
    this._call = call;
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get kol(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class MintPoolShareFromLibCall extends ethereum.Call {
  get inputs(): MintPoolShareFromLibCall__Inputs {
    return new MintPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): MintPoolShareFromLibCall__Outputs {
    return new MintPoolShareFromLibCall__Outputs(this);
  }
}

export class MintPoolShareFromLibCall__Inputs {
  _call: MintPoolShareFromLibCall;

  constructor(call: MintPoolShareFromLibCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPoolShareFromLibCall__Outputs {
  _call: MintPoolShareFromLibCall;

  constructor(call: MintPoolShareFromLibCall) {
    this._call = call;
  }
}

export class PullPoolShareFromLibCall extends ethereum.Call {
  get inputs(): PullPoolShareFromLibCall__Inputs {
    return new PullPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): PullPoolShareFromLibCall__Outputs {
    return new PullPoolShareFromLibCall__Outputs(this);
  }
}

export class PullPoolShareFromLibCall__Inputs {
  _call: PullPoolShareFromLibCall;

  constructor(call: PullPoolShareFromLibCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullPoolShareFromLibCall__Outputs {
  _call: PullPoolShareFromLibCall;

  constructor(call: PullPoolShareFromLibCall) {
    this._call = call;
  }
}

export class PushPoolShareFromLibCall extends ethereum.Call {
  get inputs(): PushPoolShareFromLibCall__Inputs {
    return new PushPoolShareFromLibCall__Inputs(this);
  }

  get outputs(): PushPoolShareFromLibCall__Outputs {
    return new PushPoolShareFromLibCall__Outputs(this);
  }
}

export class PushPoolShareFromLibCall__Inputs {
  _call: PushPoolShareFromLibCall;

  constructor(call: PushPoolShareFromLibCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushPoolShareFromLibCall__Outputs {
  _call: PushPoolShareFromLibCall;

  constructor(call: PushPoolShareFromLibCall) {
    this._call = call;
  }
}

export class RemoveWhitelistedLiquidityProviderCall extends ethereum.Call {
  get inputs(): RemoveWhitelistedLiquidityProviderCall__Inputs {
    return new RemoveWhitelistedLiquidityProviderCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistedLiquidityProviderCall__Outputs {
    return new RemoveWhitelistedLiquidityProviderCall__Outputs(this);
  }
}

export class RemoveWhitelistedLiquidityProviderCall__Inputs {
  _call: RemoveWhitelistedLiquidityProviderCall;

  constructor(call: RemoveWhitelistedLiquidityProviderCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelistedLiquidityProviderCall__Outputs {
  _call: RemoveWhitelistedLiquidityProviderCall;

  constructor(call: RemoveWhitelistedLiquidityProviderCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetManagersInfoCall extends ethereum.Call {
  get inputs(): SetManagersInfoCall__Inputs {
    return new SetManagersInfoCall__Inputs(this);
  }

  get outputs(): SetManagersInfoCall__Outputs {
    return new SetManagersInfoCall__Outputs(this);
  }
}

export class SetManagersInfoCall__Inputs {
  _call: SetManagersInfoCall;

  constructor(call: SetManagersInfoCall) {
    this._call = call;
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _ownerPercentage(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetManagersInfoCall__Outputs {
  _call: SetManagersInfoCall;

  constructor(call: SetManagersInfoCall) {
    this._call = call;
  }
}

export class SnapshotAssetsCall extends ethereum.Call {
  get inputs(): SnapshotAssetsCall__Inputs {
    return new SnapshotAssetsCall__Inputs(this);
  }

  get outputs(): SnapshotAssetsCall__Outputs {
    return new SnapshotAssetsCall__Outputs(this);
  }
}

export class SnapshotAssetsCall__Inputs {
  _call: SnapshotAssetsCall;

  constructor(call: SnapshotAssetsCall) {
    this._call = call;
  }
}

export class SnapshotAssetsCall__Outputs {
  _call: SnapshotAssetsCall;

  constructor(call: SnapshotAssetsCall) {
    this._call = call;
  }

  get value0(): SnapshotAssetsCallValue0Struct {
    return this._call.outputValues[0].value.toTuple() as SnapshotAssetsCallValue0Struct;
  }
}

export class SnapshotAssetsCallValue0Struct extends ethereum.Tuple {
  get etfAmount(): BigInt {
    return this[0].toBigInt();
  }

  get fundAmount(): BigInt {
    return this[1].toBigInt();
  }

  get snapshotTime(): BigInt {
    return this[2].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[3].toAddressArray();
  }

  get tokensAmount(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class SnapshotBeginAssetsCall extends ethereum.Call {
  get inputs(): SnapshotBeginAssetsCall__Inputs {
    return new SnapshotBeginAssetsCall__Inputs(this);
  }

  get outputs(): SnapshotBeginAssetsCall__Outputs {
    return new SnapshotBeginAssetsCall__Outputs(this);
  }
}

export class SnapshotBeginAssetsCall__Inputs {
  _call: SnapshotBeginAssetsCall;

  constructor(call: SnapshotBeginAssetsCall) {
    this._call = call;
  }
}

export class SnapshotBeginAssetsCall__Outputs {
  _call: SnapshotBeginAssetsCall;

  constructor(call: SnapshotBeginAssetsCall) {
    this._call = call;
  }
}

export class SnapshotEndAssetsCall extends ethereum.Call {
  get inputs(): SnapshotEndAssetsCall__Inputs {
    return new SnapshotEndAssetsCall__Inputs(this);
  }

  get outputs(): SnapshotEndAssetsCall__Outputs {
    return new SnapshotEndAssetsCall__Outputs(this);
  }
}

export class SnapshotEndAssetsCall__Inputs {
  _call: SnapshotEndAssetsCall;

  constructor(call: SnapshotEndAssetsCall) {
    this._call = call;
  }
}

export class SnapshotEndAssetsCall__Outputs {
  _call: SnapshotEndAssetsCall;

  constructor(call: SnapshotEndAssetsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WhitelistLiquidityProviderCall extends ethereum.Call {
  get inputs(): WhitelistLiquidityProviderCall__Inputs {
    return new WhitelistLiquidityProviderCall__Inputs(this);
  }

  get outputs(): WhitelistLiquidityProviderCall__Outputs {
    return new WhitelistLiquidityProviderCall__Outputs(this);
  }
}

export class WhitelistLiquidityProviderCall__Inputs {
  _call: WhitelistLiquidityProviderCall;

  constructor(call: WhitelistLiquidityProviderCall) {
    this._call = call;
  }

  get provider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistLiquidityProviderCall__Outputs {
  _call: WhitelistLiquidityProviderCall;

  constructor(call: WhitelistLiquidityProviderCall) {
    this._call = call;
  }
}
