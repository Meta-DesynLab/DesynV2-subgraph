// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Desyn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

    if(id != null) {
      store.set("Desyn", id.toString(), this);
    }else{
      store.set("Desyn", '', this);
    }

   
  }

  static load(id: string): Desyn | null {
    return store.get("Desyn", id) as Desyn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get color(): string {
    let value = this.get("color");
    return value.toString();
  }

  set color(value: string) {
    this.set("color", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    if (value === null) return 0;
    return value.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get finalizedPoolCount(): i32 {
    let value = this.get("finalizedPoolCount");
    if(value === null) {
      return 0
    }
    return value.toI32();
  }

  set finalizedPoolCount(value: i32) {
    this.set("finalizedPoolCount", Value.fromI32(value));
  }

  get crpCount(): i32 {
    let value = this.get("crpCount");
    if (value === null) return 0;
    return value.toI32();
  }

  set crpCount(value: i32) {
    this.set("crpCount", Value.fromI32(value));
  }

  get pools(): Array<string> | null {
    let value = this.get("pools");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pools(value: Array<string> | null) {
    if (value === null) {
      this.unset("pools");
    } else {
      this.set("pools", Value.fromStringArray(value as Array<string>));
    }
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity");
    if(value === null) {
      return  BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

 
    if(id != null) {
      store.set("Pool", id.toString(), this);
    }else{
      store.set("Pool", '', this);
    }
    
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    if(value === null) {
      return '';
    }
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get controller(): Bytes {
    let value = this.get("controller");
    return value.toBytes();
  }

  set controller(value: Bytes) {
    this.set("controller", Value.fromBytes(value));
  }

  get publicSwap(): boolean {
    let value = this.get("publicSwap");
    if(value === null) {
      return false;
    }
    return value.toBoolean();
  }

  set publicSwap(value: boolean) {
    this.set("publicSwap", Value.fromBoolean(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized");
    if(value === null) {
      return false;
    }
    return value.toBoolean();
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get crp(): boolean {
    let value = this.get("crp");
    if (value == null) return false;
    return value.toBoolean();
  }

  set crp(value: boolean) {
    this.set("crp", Value.fromBoolean(value));
  }

  get crpController(): Bytes | null {
    let value = this.get("crpController");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set crpController(value: Bytes | null) {
    if (value === null) {
      this.unset("crpController");
    } else {
      this.set("crpController", Value.fromBytes(value as Bytes));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get rights(): Array<string> {
    let value = this.get("rights");
    return value.toStringArray();
  }

  set rights(value: Array<string>) {
    this.set("rights", Value.fromStringArray(value));
  }

  get upperCap(): BigInt | null {
    let value = this.get("upperCap");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set upperCap(value: BigInt | null) {
    if (value === null) {
      this.unset("upperCap");
    } else {
      this.set("upperCap", Value.fromBigInt(value as BigInt));
    }
  }

  get floorCap(): BigInt | null {
    let value = this.get("floorCap");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set floorCap(value: BigInt | null) {
    if (value === null) {
      this.unset("floorCap");
    } else {
      this.set("floorCap", Value.fromBigInt(value as BigInt));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    if(value === null) {
      return false;
    }
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee");
    return value.toBigDecimal();
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get managerFee(): BigInt | null {
    let value = this.get("managerFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set managerFee(value: BigInt | null) {
    if (value === null) {
      this.unset("managerFee");
    } else {
      this.set("managerFee", Value.fromBigInt(value as BigInt));
    }
  }

  get issueFee(): BigInt | null {
    let value = this.get("issueFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set issueFee(value: BigInt | null) {
    if (value === null) {
      this.unset("issueFee");
    } else {
      this.set("issueFee", Value.fromBigInt(value as BigInt));
    }
  }

  get redeemFee(): BigInt | null {
    let value = this.get("redeemFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redeemFee(value: BigInt | null) {
    if (value === null) {
      this.unset("redeemFee");
    } else {
      this.set("redeemFee", Value.fromBigInt(value as BigInt));
    }
  }

  get perfermanceFee(): BigInt | null {
    let value = this.get("perfermanceFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set perfermanceFee(value: BigInt | null) {
    if (value === null) {
      this.unset("perfermanceFee");
    } else {
      this.set("perfermanceFee", Value.fromBigInt(value as BigInt));
    }
  }

  get startClaimFeeTime(): BigInt | null {
    let value = this.get("startClaimFeeTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startClaimFeeTime(value: BigInt | null) {
    if (value === null) {
      this.unset("startClaimFeeTime");
    } else {
      this.set("startClaimFeeTime", Value.fromBigInt(value as BigInt));
    }
  }

  get totalWeight(): BigDecimal {
    let value = this.get("totalWeight");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set totalWeight(value: BigDecimal) {
    this.set("totalWeight", Value.fromBigDecimal(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume");
    return value.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee");
    return value.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get tokensList(): Array<Bytes> {
    let value = this.get("tokensList");
    if(value === null) {
      return new Array<Bytes>(0);
    }
    return value.toBytesArray();
  }

  set tokensList(value: Array<Bytes>) {
    this.set("tokensList", Value.fromBytesArray(value));
  }

  get tokensOriginalList(): Array<Bytes> {
    let value = this.get("tokensOriginalList");
    return value.toBytesArray();
  }

  set tokensOriginalList(value: Array<Bytes>) {
    this.set("tokensOriginalList", Value.fromBytesArray(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get shares(): Array<string> | null {
    let value = this.get("shares");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shares(value: Array<string> | null) {
    if (value === null) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromStringArray(value as Array<string>));
    }
  }

  get createTime(): i32 {
    let value = this.get("createTime");
    return value.toI32();
  }

  set createTime(value: i32) {
    this.set("createTime", Value.fromI32(value));
  }

  get tokensCount(): BigInt {
    let value = this.get("tokensCount");
    if(value === null) {
      return BigInt.zero();
    }
    return value.toBigInt();
  }

  set tokensCount(value: BigInt) {
    this.set("tokensCount", Value.fromBigInt(value));
  }

  get holdersCount(): BigInt {
    let value = this.get("holdersCount");
    if(value === null) {
      return BigInt.zero();
    }
    return value.toBigInt();
  }

  set holdersCount(value: BigInt) {
    this.set("holdersCount", Value.fromBigInt(value));
  }

  get joinsCount(): BigInt {
    let value = this.get("joinsCount");
    if(value === null) {
      return BigInt.zero();
    }
    return value.toBigInt();
  }

  set joinsCount(value: BigInt) {
    this.set("joinsCount", Value.fromBigInt(value));
  }

  get exitsCount(): BigInt {
    let value = this.get("exitsCount");
    if(value === null) {
      return BigInt.zero();
    }
    return value.toBigInt();
  }

  set exitsCount(value: BigInt) {
    this.set("exitsCount", Value.fromBigInt(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount");
    return value.toBigInt();
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get factoryID(): string {
    let value = this.get("factoryID");
    return value.toString();
  }

  set factoryID(value: string) {
    this.set("factoryID", Value.fromString(value));
  }

  get tx(): Bytes | null {
    let value = this.get("tx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (value === null) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(value as Bytes));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }

  get collectPeriod(): BigInt | null {
    let value = this.get("collectPeriod");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectPeriod(value: BigInt | null) {
    if (value === null) {
      this.unset("collectPeriod");
    } else {
      this.set("collectPeriod", Value.fromBigInt(value as BigInt));
    }
  }

  get collectEndTime(): BigInt | null {
    let value = this.get("collectEndTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("collectEndTime");
    } else {
      this.set("collectEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get closurePeriod(): BigInt | null {
    let value = this.get("closurePeriod");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closurePeriod(value: BigInt | null) {
    if (value === null) {
      this.unset("closurePeriod");
    } else {
      this.set("closurePeriod", Value.fromBigInt(value as BigInt));
    }
  }

  get closureEndTime(): BigInt | null {
    let value = this.get("closureEndTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closureEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("closureEndTime");
    } else {
      this.set("closureEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get etype(): BigInt | null {
    let value = this.get("etype");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set etype(value: BigInt | null) {
    if (value === null) {
      this.unset("etype");
    } else {
      this.set("etype", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenWhiteLists(): Array<string> | null {
    let value = this.get("tokenWhiteLists");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenWhiteLists(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenWhiteLists");
    } else {
      this.set(
        "tokenWhiteLists",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get investorLists(): Array<string> | null {
    let value = this.get("investorLists");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set investorLists(value: Array<string> | null) {
    if (value === null) {
      this.unset("investorLists");
    } else {
      this.set("investorLists", Value.fromStringArray(value as Array<string>));
    }
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (value === null) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(value as BigInt));
    }
  }

  get isSoldOut(): boolean {
    let value = this.get("isSoldOut");
    return value.toBoolean();
  }

  set isSoldOut(value: boolean) {
    this.set("isSoldOut", Value.fromBoolean(value));
  }
}

export class EtfStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");


    if(id != null) {
      store.set("EtfStatus", id.toString(), this);
    }else{
      store.set("EtfStatus", '', this);
    }


  }

  static load(id: string): EtfStatus | null {
    return store.get("EtfStatus", id) as EtfStatus | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectPeriod(): BigInt {
    let value = this.get("collectPeriod");
    return value.toBigInt();
  }

  set collectPeriod(value: BigInt) {
    this.set("collectPeriod", Value.fromBigInt(value));
  }

  get collectEndTime(): BigInt {
    let value = this.get("collectEndTime");
    return value.toBigInt();
  }

  set collectEndTime(value: BigInt) {
    this.set("collectEndTime", Value.fromBigInt(value));
  }

  get closurePeriod(): BigInt {
    let value = this.get("closurePeriod");
    return value.toBigInt();
  }

  set closurePeriod(value: BigInt) {
    this.set("closurePeriod", Value.fromBigInt(value));
  }

  get closureEndTime(): BigInt {
    let value = this.get("closureEndTime");
    return value.toBigInt();
  }

  set closureEndTime(value: BigInt) {
    this.set("closureEndTime", Value.fromBigInt(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");


    if(id != null) {
      store.set("PoolToken", id.toString(), this);
    }else{
      store.set("PoolToken", '', this);
    }
   
  }

  static load(id: string): PoolToken | null {
    return store.get("PoolToken", id) as PoolToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if(value === null) {
      return 0;
    }
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get denormWeight(): BigDecimal {
    let value = this.get("denormWeight");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set denormWeight(value: BigDecimal) {
    this.set("denormWeight", Value.fromBigDecimal(value));
  }
}

export class PoolShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
   
  
    if(id != null) {
      store.set("PoolShare", id.toString(), this);
    }else{
      store.set("PoolShare", '', this);
    }

    
  }

  static load(id: string): PoolShare | null {
    return store.get("PoolShare", id) as PoolShare | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");


    if(id != null) {
      store.set("User", id.toString(), this);
    }else{
      store.set("User", '', this);
    };

   
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sharesOwned(): Array<string> | null {
    let value = this.get("sharesOwned");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sharesOwned(value: Array<string> | null) {
    if (value === null) {
      this.unset("sharesOwned");
    } else {
      this.set("sharesOwned", Value.fromStringArray(value as Array<string>));
    }
  }

  get txs(): Array<string> | null {
    let value = this.get("txs");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set txs(value: Array<string> | null) {
    if (value === null) {
      this.unset("txs");
    } else {
      this.set("txs", Value.fromStringArray(value as Array<string>));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
  
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    return value.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenInSym(): string {
    let value = this.get("tokenInSym");
    return value.toString();
  }

  set tokenInSym(value: string) {
    this.set("tokenInSym", Value.fromString(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    return value.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenOutSym(): string {
    let value = this.get("tokenOutSym");
    return value.toString();
  }

  set tokenOutSym(value: string) {
    this.set("tokenOutSym", Value.fromString(value));
  }

  get tokenAmountIn(): BigDecimal {
    let value = this.get("tokenAmountIn");
    return value.toBigDecimal();
  }

  set tokenAmountIn(value: BigDecimal) {
    this.set("tokenAmountIn", Value.fromBigDecimal(value));
  }

  get tokenAmountOut(): BigDecimal {
    let value = this.get("tokenAmountOut");
    return value.toBigDecimal();
  }

  set tokenAmountOut(value: BigDecimal) {
    this.set("tokenAmountOut", Value.fromBigDecimal(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(value as string));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(value as string));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get feeValue(): BigDecimal {
    let value = this.get("feeValue");
    return value.toBigDecimal();
  }

  set feeValue(value: BigDecimal) {
    this.set("feeValue", Value.fromBigDecimal(value));
  }

  get poolTotalSwapVolume(): BigDecimal {
    let value = this.get("poolTotalSwapVolume");
    return value.toBigDecimal();
  }

  set poolTotalSwapVolume(value: BigDecimal) {
    this.set("poolTotalSwapVolume", Value.fromBigDecimal(value));
  }

  get poolTotalSwapFee(): BigDecimal {
    let value = this.get("poolTotalSwapFee");
    return value.toBigDecimal();
  }

  set poolTotalSwapFee(value: BigDecimal) {
    this.set("poolTotalSwapFee", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity");
    return value.toBigDecimal();
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

    if(id != null) {
      store.set("Transaction", id.toString(), this);
    }else{
      store.set("Transaction", '', this);
    };
   
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (value === null) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(value as string));
    }
  }

  get block(): i32 {
    let value = this.get("block");
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get gasUsed(): BigDecimal | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set gasUsed(value: BigDecimal | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get gasPrice(): BigDecimal | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set gasPrice(value: BigDecimal | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(value as string));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(value as string));
    }
  }

  get tokenAddress(): string | null {
    let value = this.get("tokenAddress");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromString(value as string));
    }
  }

  get action(): string | null {
    let value = this.get("action");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (value === null) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(value as string));
    }
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }

  get tokenAmountInOut(): BigDecimal | null {
    let value = this.get("tokenAmountInOut");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenAmountInOut(value: BigDecimal | null) {
    if (value === null) {
      this.unset("tokenAmountInOut");
    } else {
      this.set("tokenAmountInOut", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get newAmount(): BigDecimal | null {
    let value = this.get("newAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set newAmount(value: BigDecimal | null) {
    if (value === null) {
      this.unset("newAmount");
    } else {
      this.set("newAmount", Value.fromBigDecimal(value as BigDecimal));
    }
  }

  get lpTokenShare(): BigDecimal | null {
    let value = this.get("lpTokenShare");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lpTokenShare(value: BigDecimal | null) {
    if (value === null) {
      this.unset("lpTokenShare");
    } else {
      this.set("lpTokenShare", Value.fromBigDecimal(value as BigDecimal));
    }
  }
}

export class TokenPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

    if(id != null) {
      store.set("TokenPrice", id.toString(), this);
    }else {
      store.set("TokenPrice", '', this);
    }

   
  }

  static load(id: string): TokenPrice | null {
    return store.get("TokenPrice", id) as TokenPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity");
    if(value === null) {
      return BigDecimal.zero();
    }
    return value.toBigDecimal();
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get poolTokenId(): string | null {
    let value = this.get("poolTokenId");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolTokenId(value: string | null) {
    if (value === null) {
      this.unset("poolTokenId");
    } else {
      this.set("poolTokenId", Value.fromString(value as string));
    }
  }
}

export class TokenWhiteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");


    if(id != null) {
      store.set("TokenWhiteList", id.toString(), this);
    }else {
      store.set("TokenWhiteList", '', this);
    }

    
  }

  static load(id: string): TokenWhiteList | null {
    return store.get("TokenWhiteList", id) as TokenWhiteList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get spender(): string | null {
    let value = this.get("spender");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set spender(value: string | null) {
    if (value === null) {
      this.unset("spender");
    } else {
      this.set("spender", Value.fromString(value as string));
    }
  }

  get sort(): BigInt | null {
    let value = this.get("sort");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sort(value: BigInt | null) {
    if (value === null) {
      this.unset("sort");
    } else {
      this.set("sort", Value.fromBigInt(value as BigInt));
    }
  }

  get caller(): string | null {
    let value = this.get("caller");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set caller(value: string | null) {
    if (value === null) {
      this.unset("caller");
    } else {
      this.set("caller", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }
}

export class ExcuteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

    if(id != null) {
      store.set("ExcuteList", id.toString(), this);
    }else {
      store.set("ExcuteList", '', this);
    }

   
  }

  static load(id: string): ExcuteList | null {
    return store.get("ExcuteList", id) as ExcuteList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string | null {
    let value = this.get("hash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hash(value: string | null) {
    if (value === null) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromString(value as string));
    }
  }
}

export class InvestorList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");


    if(id != null) {
      store.set("InvestorList", id.toString(), this);
    }else {
      store.set("InvestorList", '', this);
    }

   
  }

  static load(id: string): InvestorList | null {
    return store.get("InvestorList", id) as InvestorList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId");
    if(value === null) {
      return '';
    }
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(value as string));
    }
  }
}

export class PoolTokenInitList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");

    if(id == null) return
    store.set("PoolTokenInitList", id.toString(), this);
   
  }

  static load(id: string): PoolTokenInitList | null {
    return store.get("PoolTokenInitList", id) as PoolTokenInitList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): string | null {
    let value = this.get("caller");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set caller(value: string | null) {
    if (value === null) {
      this.unset("caller");
    } else {
      this.set("caller", Value.fromString(value as string));
    }
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get initToken(): string | null {
    let value = this.get("initToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initToken(value: string | null) {
    if (value === null) {
      this.unset("initToken");
    } else {
      this.set("initToken", Value.fromString(value as string));
    }
  }

  get initTokenTotal(): BigInt | null {
    let value = this.get("initTokenTotal");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initTokenTotal(value: BigInt | null) {
    if (value === null) {
      this.unset("initTokenTotal");
    } else {
      this.set("initTokenTotal", Value.fromBigInt(value as BigInt));
    }
  }

  get initShare(): BigInt | null {
    let value = this.get("initShare");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initShare(value: BigInt | null) {
    if (value === null) {
      this.unset("initShare");
    } else {
      this.set("initShare", Value.fromBigInt(value as BigInt));
    }
  }
}
