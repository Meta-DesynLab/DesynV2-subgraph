// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_CALL extends ethereum.Event {
  get params(): LOG_CALL__Params {
    return new LOG_CALL__Params(this);
  }
}

export class LOG_CALL__Params {
  _event: LOG_CALL;

  constructor(event: LOG_CALL) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LOG_EXIT extends ethereum.Event {
  get params(): LOG_EXIT__Params {
    return new LOG_EXIT__Params(this);
  }
}

export class LOG_EXIT__Params {
  _event: LOG_EXIT;

  constructor(event: LOG_EXIT) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_JOIN extends ethereum.Event {
  get params(): LOG_JOIN__Params {
    return new LOG_JOIN__Params(this);
  }
}

export class LOG_JOIN__Params {
  _event: LOG_JOIN;

  constructor(event: LOG_JOIN) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LOG_REBALANCE extends ethereum.Event {
  get params(): LOG_REBALANCE__Params {
    return new LOG_REBALANCE__Params(this);
  }
}

export class LOG_REBALANCE__Params {
  _event: LOG_REBALANCE;

  constructor(event: LOG_REBALANCE) {
    this._event = event;
  }

  get tokenA(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newWeightA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newWeightB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newBalanceA(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newBalanceB(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isSoldout(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  BONE(): BigInt {
    let result = super.call("BONE", "BONE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BONE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BONE", "BONE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BPOW_PRECISION(): BigInt {
    let result = super.call("BPOW_PRECISION", "BPOW_PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BPOW_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BPOW_PRECISION",
      "BPOW_PRECISION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  EXIT_FEE(): BigInt {
    let result = super.call("EXIT_FEE", "EXIT_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EXIT_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EXIT_FEE", "EXIT_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  INIT_POOL_SUPPLY(): BigInt {
    let result = super.call(
      "INIT_POOL_SUPPLY",
      "INIT_POOL_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_INIT_POOL_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INIT_POOL_SUPPLY",
      "INIT_POOL_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BOUND_TOKENS(): BigInt {
    let result = super.call(
      "MAX_BOUND_TOKENS",
      "MAX_BOUND_TOKENS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BOUND_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BOUND_TOKENS",
      "MAX_BOUND_TOKENS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPOW_BASE(): BigInt {
    let result = super.call("MAX_BPOW_BASE", "MAX_BPOW_BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPOW_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BPOW_BASE",
      "MAX_BPOW_BASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_IN_RATIO(): BigInt {
    let result = super.call("MAX_IN_RATIO", "MAX_IN_RATIO():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_IN_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_IN_RATIO", "MAX_IN_RATIO():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_OUT_RATIO(): BigInt {
    let result = super.call("MAX_OUT_RATIO", "MAX_OUT_RATIO():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_OUT_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_OUT_RATIO",
      "MAX_OUT_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_TOTAL_WEIGHT(): BigInt {
    let result = super.call(
      "MAX_TOTAL_WEIGHT",
      "MAX_TOTAL_WEIGHT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOTAL_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOTAL_WEIGHT",
      "MAX_TOTAL_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_WEIGHT(): BigInt {
    let result = super.call("MAX_WEIGHT", "MAX_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_WEIGHT", "MAX_WEIGHT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_BALANCE(): BigInt {
    let result = super.call("MIN_BALANCE", "MIN_BALANCE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_BALANCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_BALANCE", "MIN_BALANCE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_BOUND_TOKENS(): BigInt {
    let result = super.call(
      "MIN_BOUND_TOKENS",
      "MIN_BOUND_TOKENS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_BOUND_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_BOUND_TOKENS",
      "MIN_BOUND_TOKENS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_BPOW_BASE(): BigInt {
    let result = super.call("MIN_BPOW_BASE", "MIN_BPOW_BASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_BPOW_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_BPOW_BASE",
      "MIN_BPOW_BASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_FEE(): BigInt {
    let result = super.call("MIN_FEE", "MIN_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_FEE", "MIN_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_WEIGHT(): BigInt {
    let result = super.call("MIN_WEIGHT", "MIN_WEIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_WEIGHT", "MIN_WEIGHT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(src: Address, dst: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );

    return result[0].toBigInt();
  }

  try_allowance(src: Address, dst: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(src), ethereum.Value.fromAddress(dst)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(dst: Address, amt: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_approve(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(whom: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(whom: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(whom)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcInGivenOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcInGivenOut",
      "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcInGivenOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcInGivenOut",
      "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcOutGivenIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcOutGivenIn",
      "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcOutGivenIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcOutGivenIn",
      "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcPoolInGivenSingleOut(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcPoolInGivenSingleOut",
      "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcPoolInGivenSingleOut(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcPoolInGivenSingleOut",
      "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcPoolOutGivenSingleIn",
      "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    tokenAmountIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcPoolOutGivenSingleIn",
      "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(tokenAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSingleInGivenPoolOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcSingleInGivenPoolOut",
      "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSingleInGivenPoolOut(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSingleInGivenPoolOut",
      "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountIn: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcSingleOutGivenPoolIn",
      "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    poolSupply: BigInt,
    totalWeight: BigInt,
    poolAmountIn: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSingleOutGivenPoolIn",
      "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(poolSupply),
        ethereum.Value.fromUnsignedBigInt(totalWeight),
        ethereum.Value.fromUnsignedBigInt(poolAmountIn),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcSpotPrice(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    swapFee: BigInt
  ): BigInt {
    let result = super.call(
      "calcSpotPrice",
      "calcSpotPrice(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcSpotPrice(
    tokenBalanceIn: BigInt,
    tokenWeightIn: BigInt,
    tokenBalanceOut: BigInt,
    tokenWeightOut: BigInt,
    swapFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcSpotPrice",
      "calcSpotPrice(uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenBalanceIn),
        ethereum.Value.fromUnsignedBigInt(tokenWeightIn),
        ethereum.Value.fromUnsignedBigInt(tokenBalanceOut),
        ethereum.Value.fromUnsignedBigInt(tokenWeightOut),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  execute(_target: Address, _value: BigInt, _data: Bytes): Bytes {
    let result = super.call(
      "execute",
      "execute(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_execute(
    _target: Address,
    _value: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "execute",
      "execute(address,uint256,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBalance(token: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getColor(): Bytes {
    let result = super.call("getColor", "getColor():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getColor(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getColor", "getColor():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTokens(): Array<Address> {
    let result = super.call(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCurrentTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCurrentTokens",
      "getCurrentTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDenormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedWeight",
      "getDenormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFinalTokens(): Array<Address> {
    let result = super.call(
      "getFinalTokens",
      "getFinalTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getFinalTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFinalTokens",
      "getFinalTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getNormalizedWeight(token: Address): BigInt {
    let result = super.call(
      "getNormalizedWeight",
      "getNormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getNormalizedWeight(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNormalizedWeight",
      "getNormalizedWeight(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumTokens(): BigInt {
    let result = super.call("getNumTokens", "getNumTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNumTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumTokens", "getNumTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDenormalizedWeight(): BigInt {
    let result = super.call(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDenormalizedWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDenormalizedWeight",
      "getTotalDenormalizedWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseApproval(dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [ethereum.Value.fromAddress(dst), ethereum.Value.fromUnsignedBigInt(amt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBound(t: Address): boolean {
    let result = super.call("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);

    return result[0].toBoolean();
  }

  try_isBound(t: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBound", "isBound(address):(bool)", [
      ethereum.Value.fromAddress(t)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFinalized(): boolean {
    let result = super.call("isFinalized", "isFinalized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFinalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinalized", "isFinalized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublicSwap(): boolean {
    let result = super.call("isPublicSwap", "isPublicSwap():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPublicSwap(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublicSwap", "isPublicSwap():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amt: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amt)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amt: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amt: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BindCall extends ethereum.Call {
  get inputs(): BindCall__Inputs {
    return new BindCall__Inputs(this);
  }

  get outputs(): BindCall__Outputs {
    return new BindCall__Outputs(this);
  }
}

export class BindCall__Inputs {
  _call: BindCall;

  constructor(call: BindCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get denorm(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BindCall__Outputs {
  _call: BindCall;

  constructor(call: BindCall) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _returnValue(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get poolAmountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class GetNormalizedWeightCall extends ethereum.Call {
  get inputs(): GetNormalizedWeightCall__Inputs {
    return new GetNormalizedWeightCall__Inputs(this);
  }

  get outputs(): GetNormalizedWeightCall__Outputs {
    return new GetNormalizedWeightCall__Outputs(this);
  }
}

export class GetNormalizedWeightCall__Inputs {
  _call: GetNormalizedWeightCall;

  constructor(call: GetNormalizedWeightCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetNormalizedWeightCall__Outputs {
  _call: GetNormalizedWeightCall;

  constructor(call: GetNormalizedWeightCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GulpCall extends ethereum.Call {
  get inputs(): GulpCall__Inputs {
    return new GulpCall__Inputs(this);
  }

  get outputs(): GulpCall__Outputs {
    return new GulpCall__Outputs(this);
  }
}

export class GulpCall__Inputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GulpCall__Outputs {
  _call: GulpCall;

  constructor(call: GulpCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get poolAmountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class RebindCall extends ethereum.Call {
  get inputs(): RebindCall__Inputs {
    return new RebindCall__Inputs(this);
  }

  get outputs(): RebindCall__Outputs {
    return new RebindCall__Outputs(this);
  }
}

export class RebindCall__Inputs {
  _call: RebindCall;

  constructor(call: RebindCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get denorm(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RebindCall__Outputs {
  _call: RebindCall;

  constructor(call: RebindCall) {
    this._call = call;
  }
}

export class RebindPureCall extends ethereum.Call {
  get inputs(): RebindPureCall__Inputs {
    return new RebindPureCall__Inputs(this);
  }

  get outputs(): RebindPureCall__Outputs {
    return new RebindPureCall__Outputs(this);
  }
}

export class RebindPureCall__Inputs {
  _call: RebindPureCall;

  constructor(call: RebindPureCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get denorm(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isBound(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class RebindPureCall__Outputs {
  _call: RebindPureCall;

  constructor(call: RebindPureCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetPublicSwapCall extends ethereum.Call {
  get inputs(): SetPublicSwapCall__Inputs {
    return new SetPublicSwapCall__Inputs(this);
  }

  get outputs(): SetPublicSwapCall__Outputs {
    return new SetPublicSwapCall__Outputs(this);
  }
}

export class SetPublicSwapCall__Inputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }

  get public_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPublicSwapCall__Outputs {
  _call: SetPublicSwapCall;

  constructor(call: SetPublicSwapCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnbindCall extends ethereum.Call {
  get inputs(): UnbindCall__Inputs {
    return new UnbindCall__Inputs(this);
  }

  get outputs(): UnbindCall__Outputs {
    return new UnbindCall__Outputs(this);
  }
}

export class UnbindCall__Inputs {
  _call: UnbindCall;

  constructor(call: UnbindCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnbindCall__Outputs {
  _call: UnbindCall;

  constructor(call: UnbindCall) {
    this._call = call;
  }
}

export class UnbindPureCall extends ethereum.Call {
  get inputs(): UnbindPureCall__Inputs {
    return new UnbindPureCall__Inputs(this);
  }

  get outputs(): UnbindPureCall__Outputs {
    return new UnbindPureCall__Outputs(this);
  }
}

export class UnbindPureCall__Inputs {
  _call: UnbindPureCall;

  constructor(call: UnbindPureCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnbindPureCall__Outputs {
  _call: UnbindPureCall;

  constructor(call: UnbindPureCall) {
    this._call = call;
  }
}
